1.Try-Catch:
    Khối try-catch trong Java được sử dụng để xử lý các ngoại lệ (exceptions)
    * Khi một ngoại lệ xảy ra trong khối try,
    * Nó sẽ được bắt bởi khối catch tương ứng
    giúp chương trình không bị dừng đột ngột.
1.1 Khi nào cần sử dụng try-catch trong Java
    * Lỗi logic: Khi bạn không thể kiểm soát toàn bộ dữ liệu đầu vào và có thể xảy ra lỗi logic
    * Chia cho 0: Khi có phép chia cho 0, Java sẽ ném ra một ngoại lệ
    * Kết nối cơ sở dữ liệu: Trong quá trình làm việc với cơ sở dữ liệu, có thể xảy ra các lỗi kết nối
1.2 Cú pháp của try-catch trong Java
try { // vùng khối xử lý code nghi ngờ bị lỗi
    // Mã lệnh có thể gây ra ngoại lệ
} catch (Exception_Type e) { // khối xử lý lỗi để cho chương trình vẫn tiếp tục chạy
    // Xử lý ngoại lệ ở đây
	e.printStackTrace(); // printStackTrace() - để biết thêm thông tin mình đang gặp lỗi gì
	System.out.println("Error : " + e.getMessage()); // in ra message cho dễ nh
}
1 Try có thể nhiều catch, nhưng các catch phải nhiều hàm phải bằng hoặc ngang hàng nhau
1.3 finally - luôn luôn thực thi 1 cái gì đó
1.4 Một số lớp ngoại lệ chuẩn của Java
    https://kungfutech.edu.vn/bai-viet/java/mot-so-lop-ngoai-le-chuan-cua-java
2. THROW(throw) - được sử dụng để tạo ra 1 Exception cụ thể và đẩy nó ra khỏi method hiện tại
    Từ khóa throw trong Java được sử dụng để ném ra một exception tường minh. Chúng ta có thể
    ném cả Checked Exception và Unchecked Exception  trong Java bằng từ khóa throw. Từ khóa
    throw thường được sử dụng để ném các Custom Exception (là các exception được định nghĩa
    bởi lập trình viên).
2.1 Cú Pháp
    Ví dụ về việc sử dụng throw để ném ra một IOException:
        throw new IOException("File không tồn tại");